application:
  configuration:
    input.repository_url:                     "http://archive.cloudera.com" # origin cloudera archive: "http://archive.cloudera.com"
    input.cdh_ami:                            "us-west-1/ami-0e073d4b"
    #input.cdh_ami:                            "us-east-1/ami-ee698586"
    input.cluster_prefix:                     "cdh_default_name"
    input.cookbooks_url:                      "https://dl.dropboxusercontent.com/u/250836/hadoop.tar.gz"
    input.datanodes:                          "5"
    input.master_hardware:                    "m3.large"
    input.datanode_hardware:                  "m3.large"
    input.cloudera_hadoop_version:            "5.1.3"
    input.cloudera_manager_version:           "5.1.3"
    input.cloudera_search_version:            "1.3.0"
    input.cloudera_impala_version:            "1.4.0"
    input.metastore_root_password:            "hive"
  interfaces:
    input:
      repository_url:                         "bind(workflow#input.repository_url)"
      cdh_ami:                                "bind(workflow#input.cdh_ami)"
      cluster_prefix:                         "bind(workflow#input.cluster_prefix)"
      cookbooks_url:                          "bind(workflow#input.cookbooks_url)"
      datanodes:                              "bind(workflow#input.datanodes)"
      master_hardware:                        "bind(workflow#input.master_hardware)"
      datanode_hardware:                      "bind(workflow#input.datanode_hardware)"
      cloudera_hadoop_version:                "bind(workflow#input.cloudera_hadoop_version)"
      cloudera_manager_version:               "bind(workflow#input.cloudera_manager_version)"
      cloudera_search_version:                "bind(workflow#input.cloudera_search_version)"
      cloudera_impala_version:                "bind(workflow#input.cloudera_impala_version)"
      metastore_root_password:                "bind(workflow#input.metastore_root_password)"
    management:
      upload-dataset:                         "bind(workflow#actions.upload-dataset)"
#     add-pig-to-cluster:                     "bind(workflow#actions.add-pig-to-cluster)"
#     add-solr-to-cluster:                    "bind(workflow#actions.add-solr-to-cluster)"
    Cloudera:
      Manager:                                "bind(workflow#result.cloudera_Manager)"
      Login:                                  "bind(workflow#result.cloudera_Login)"
      Password:                               "bind(workflow#result.cloudera_Password)"
      ApiUrl:                                 "bind(workflow#result.cloudera_ApiUrl)"
      HDFS:                                   "bind(workflow#result.cloudera_hdfsWebui)"
      HBase:                                  "bind(workflow#result.cloudera_hbaseWebui)"
      JobTracker:                             "bind(workflow#result.cloudera_jobtrackerWebui)"
    Oozie:
      Server:                                 "bind(workflow#result.Oozie_Server)"
    Hdfs:
      DataNodes:                              "bind(workflow#result.DataNode)"
      DataDns:                                "bind(workflow#result.DataDns)"
      NameNode:                               "bind(workflow#result.NameNode)"
      NameNode1:                              "bind(workflow#result.Primary_NameNode)"
      NameNode2:                              "bind(workflow#result.Secondary_NameNode)"
    Hbase:
      Master:                                 "bind(workflow#result.Hbase_Master)"
      MasterDns:                              "bind(workflow#result.Hbase_MasterDns)"
    Management:
      Manager:                                "bind(workflow#result.Node_Manager)"
      ManagerDns:                             "bind(workflow#result.Node_ManagerDns)"
    MapReduce:
      JobTrackerIp:                             "bind(workflow#result.JobTracker)"
    Hive:
      Server:                                 "bind(workflow#result.Hive_Server)"
      Metastore:                              "bind(workflow#result.Hive_Metastore)"
    Hue:
      HueUrl:                                 "bind(workflow#result.hue_url)"
  components:
    workflow:
      type: workflow.Instance
      interfaces:
        input:   # these are the input parameters that will be available to all workflows within the component
          repository_url:                     configuration(string)
          cdh_ami:                            configuration(string)
          cluster_prefix:                     configuration(string)
          cookbooks_url:                      configuration(string)
          datanodes:                          configuration(string)
          master_hardware:                    configuration(string)
          datanode_hardware:                  configuration(string)
          cloudera_hadoop_version:            configuration(string)
          cloudera_manager_version:           configuration(string)
          cloudera_search_version:            configuration(string)
          cloudera_impala_version:            configuration(string)
          metastore_root_password:            configuration(string)
        actions:
          upload-dataset: receive-command(string datasetpath, string dstpath, string awsAccessId, string awsSecretKey)
        #   add-pig-to-cluster: receive-command(string repository_url, string cloudera_hadoop_version)
        #   add-solr-to-cluster: receive-command(string repository_url, string cloudera_hadoop_version, string cloudera_search_version, string MasterDns, string ManagerDns, string DataDns)
        result:  # should be string instead of list<string>
          NameNode:                           publish-signal(list<string>)
          Primary_NameNode:                   publish-signal(list<string>)
          Secondary_NameNode:                 publish-signal(list<string>)
          Oozie_Server:                       publish-signal(list<string>)
          Hbase_Master:                       publish-signal(list<string>)
          Hbase_MasterDns:                    publish-signal(string)
          JobTracker:                         publish-signal(list<string>)
          Hive_Server:                        publish-signal(list<string>)
          Hive_Metastore:                     publish-signal(list<string>)
          DataNode:                           publish-signal(list<string>)
          DataDns:                            publish-signal(list<string>)
          Node_Master:                        publish-signal(list<string>)
          Node_Manager:                       publish-signal(list<string>)
          Node_MasterDns:                     publish-signal(string)
          Node_ManagerDns:                    publish-signal(string)
          cloudera_hdfsWebui:                 publish-signal(list<string>)
          cloudera_jobtrackerWebui:           publish-signal(list<string>)
          cloudera_hbaseWebui:                publish-signal(list<string>)
          cloudera_Manager:                   publish-signal(list<string>)
          cloudera_Login:                     publish-signal(string)
          cloudera_Password:                  publish-signal(string)
          cloudera_ApiUrl:                    publish-signal(list<string>)
          hue_url:                            publish-signal(list<string>)
      required: []
      configuration:
        configuration.triggers: {}
        configuration.workflows:
            launch:
                steps:
                    - get_env_props:
                        action: getEnvironmentProperties
                        phase: get-env-props
                        output:
                            config: result
                    - provision-hadoop-manager:
                        action: .provision-node
                        phase: provision-node
                        precedingPhases: [ get-env-props ]
                        parameters:
                            roleName: "manager"
                            hardwareId: "{$.master_hardware}"
                            quantity: 1
                        output:
                            managerIp: ips
                            managerDns: dns
                    - provision-hadoop-master:
                        action: .provision-node
                        phase: provision-node
                        precedingPhases: [ get-env-props ]
                        parameters:
                            roleName: "master"
                            hardwareId: "{$.master_hardware}"
                            quantity: 1
                        output:
                            masterIp: ips
                            masterDns: dns
                    - provision-datanode:
                        action: .provision-node
                        phase: provision-node
                        precedingPhases: [ get-env-props ]
                        parameters:
                            roleName: "datanode"
                            hardwareId: "{$.datanode_hardware}"
                            quantity: "{$.datanodes}"
                        output:
                            datanodeIps: ips
                            datanodeDns: dns

                    - install-ephemeral:
                        action: chefrun
                        phase: install-ephemeral
                        precedingPhases: [ provision-node ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "datanode", "manager", "master" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::ephemeral]" ]

                    - update-hosts:
                        action: chefrun
                        phase: update-hosts
                        precedingPhases: [ provision-node ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "datanode", "manager", "master" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::hosts_aws]" ]
                            jattrs:
                                base:
                                    hosts_aws: [ "{$.masterDns[*]}", "{$.managerDns[*]}", "{$.datanodeDns[*]}" ]

                    # Install HADOOP
                    - install-cloudera-java:
                        action: chefrun
                        phase: install-java
                        precedingPhases: [ update-hosts ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master", "manager", "datanode" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[java]" ]
                            jattrs:
                                java:
                                  install_flavor: "oracle"
                                  jdk_version: "6"
                                  java_home: "/usr/java/jdk6"
                                  oracle:
                                    accept_oracle_download_terms: "true"

                    - install-mysql-client:
                        action: chefsolo
                        phase: install-mysql-client
                        precedingPhases: [ install-java ]
                        parameters:
                            roles: [ "master", "manager", "datanode" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[mysql::client]" ]

                    - install-cloudera-manager:
                        action: chefrun
                        phase: install-manager
                        precedingPhases: [ install-mysql-client ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::manager]" ]
                            jattrs:
                                cloudera:
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    manager:
                                        version: "{$.cloudera_manager_version}"
                                    repository_url: "{$.repository_url}"

                    - install-cloudera-agent:
                        action: chefrun
                        phase: install-agent
                        precedingPhases: [ install-manager ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master", "manager", "datanode" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::agent]" ]
                            jattrs:
                                cloudera:
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - start-cloudera-agent:
                        action: chefrun
                        phase: start-agent
                        precedingPhases: [ install-agent ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master", "manager", "datanode" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::start_agent]" ]

                    - install-cloudera-cms:
                        action: chefrun
                        phase: install-cms
                        precedingPhases: [ start-agent ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::cms]" ]
                            retryCount: 2
                            jattrs:
                                cloudera:
                                    manager:
                                        host: "{$.managerDns[*][0]}"

                    - provision-hadoop:
                        action: chefrun
                        phase: provision-hadoop
                        precedingPhases: [ install-cms ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::clusters_init]", "recipe[cloudera::hadoop_services_start]" ]
                            jattrs:
                                cloudera:
                                    services: [ "hdfs" ]
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    clusters:
                                        default:
                                            services:
                                                zookeeper:
                                                    server:
                                                        hosts: [ "{$.masterIp[0]}", "{$.managerIp[0]}", "{$.datanodeIps[0]}" ]
                                                hdfs:
                                                    namenode:
                                                        hosts: "{$.masterIp}"
                                                        config:
                                                            dfs_name_dir_list: "/srv/dfs/nn"
                                                    secondarynamenode:
                                                        hosts: "{$.managerIp}"
                                                        config:
                                                            fs_checkpoint_dir_list: "/srv/dfs/snn"
                                                    datanode:
                                                        hosts: "{$.datanodeIps}"
                                                        config:
                                                            log_threshold: "WARN"
                                                            dfs_data_dir_list: "/srv/dfs/dn"
                                                            dfs_datanode_data_dir_perm: "755"
                                                            datanode_config_safety_valve: |
                                                                                            <property>
                                                                                                <name>dfs.block.local-path-access.user</name>
                                                                                                <value>hbase</value>
                                                                                            </property>
                                                mapreduce:
                                                    jobtracker:
                                                        hosts: "{$.managerIp}"
                                                    tasktracker:
                                                        hosts: "{$.datanodeIps}"
                                                        config:
                                                            mapred_tasktracker_map_tasks_maximum: 6
                                                            mapred_tasktracker_reduce_tasks_maximum: 4

                                    repository_url: "{$.repository_url}"

                    - init-hadoop-dirs:
                        action: execrun
                        phase: init-hadoop-dirs
                        precedingPhases: [ provision-hadoop ]
                        parameters:
                            isSudo: true
                            roles: [ "master" ]
                            command:
                                - bash
                                - '-c'
                                - |
                                  su hdfs -c "hadoop fs -mkdir -p /tmp";
                                  su hdfs -c "hadoop fs -chmod 1777 /tmp";
                                  su hdfs -c "hadoop fs -mkdir /hbase";
                                  su hdfs -c "hadoop fs -chown hbase:hbase /hbase";
                                  su hdfs -c "hadoop fs -mkdir /user";
                                  su hdfs -c "hadoop fs -mkdir /user/mapred";
                                  su hdfs -c "hadoop fs -chown mapred:mapred /user/mapred";

                    - start-hadoop:
                        action: chefrun
                        phase: start-hadoop
                        precedingPhases: [ init-hadoop-dirs ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::hadoop_services_start]" ]
                            jattrs:
                                cloudera:
                                    services: [ "zookeeper", "mapreduce" ]
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                    repository_url: "{$.repository_url}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"

                    - install-hbase:
                        action: chefrun
                        phase: install-hbase
                        precedingPhases: [ start-hadoop ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::hbase]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*][0]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    datanodes:
                                        hosts: "{$.datanodeIps}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - packages-hive:
                        action: chefrun
                        phase: packages-hive
                        precedingPhases: [ init-hadoop-dirs ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::hive_rc]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*][0]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    datanodes:
                                        hosts: "{$.datanodeDns[*]}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"
                                mysql:
                                    server_debian_password: "{$.metastore_root_password}"
                                    server_root_password: "{$.metastore_root_password}"
                                    server_repl_password: "{$.metastore_root_password}"
                                    bind_address: "127.0.0.1"

                    - packages-client-hive:
                        action: chefrun
                        phase: packages-clients-hive
                        precedingPhases: [ packages-hive ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master", "datanode" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::hive_client_pkg]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*][0]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - services-hive:
                        action: chefrun
                        precedingPhases: [ packages-clients-hive, install-hbase ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::hive]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*][0]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    datanodes:
                                        hosts: "{$.datanodeIps}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"
                    #- wait-hive:
                    #    action: wait
                    #    description: "wait hive"
                    #    phase: wait-hive
                    #    precedingPhases: [services-hive]
                    #    parameters:
                    #      delay: 600

                    - install-oozie:
                        action: chefrun
                        phase: install-oozie
                        precedingPhases: [ services-hive ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::oozie]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*][0]}"
                                        ip: "{$.masterIp[0]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    jobtracker:
                                        host: "{$.managerDns[*][0]}"
                                        ip: "{$.managerIp[0]}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - start-oozie:
                        action: chefrun
                        phase: start-oozie
                        precedingPhases: [ install-oozie, services-hive ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::start_oozie]" ]
                            jattrs:
                                cloudera:
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - install-impala-pkg:
                        action: chefrun
                        phase: install-impala-pkg
                        precedingPhases: [ start-oozie ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master", "manager", "datanode" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::impala_pkg]" ]
                            jattrs:
                                cloudera:
                                    impala:
                                        version: "{$.cloudera_impala_version}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    manager:
                                        version: "{$.cloudera_manager_version}"
                                    repository_url: "{$.repository_url}"

                    - start-impala:
                        action: chefrun
                        phase: start-impala
                        precedingPhases: [ install-impala-pkg ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::impala_start]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*][0]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    datanodes:
                                        hosts: "{$.datanodeIps}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - install-sqoop:
                        action: chefrun
                        phase: install-sqoop
                        precedingPhases: [ start-impala ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::sqoop]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*][0]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - install-flume-pkg:
                        action: chefrun
                        phase: install-flume-pkg
                        precedingPhases: [ install-sqoop ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master", "manager", "datanode" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::flume_pkg]" ]
                            
                    - install-pig:
                        action: chefrun
                        phase: install-pig
                        precedingPhases: [ install-flume-pkg ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::pig]" ]
                            jattrs:
                                cloudera:
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - install-solr-pkg:
                        action: chefrun
                        phase: install-solr-pkg
                        precedingPhases: [ install-pig ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master", "manager", "datanode" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::solr_pkg]" ]
                            jattrs:
                                cloudera:
                                    search:
                                        version: "{$.cloudera_search_version}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    manager:
                                        version: "{$.cloudera_manager_version}"
                                    repository_url: "{$.repository_url}"

                    - start-solr:
                        action: chefrun
                        phase: start-solr
                        precedingPhases: [ install-solr-pkg ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::solr_start]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    datanode:
                                        hosts: "{$.datanodeDns[*]}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - install-ks-indexer:
                        action: chefrun
                        phase: install-ks-indexer
                        precedingPhases: [ start-solr ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::search]" ]
                            jattrs:
                                cloudera:
                                    master:
                                        host: "{$.masterDns[*]}"
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    datanode:
                                        hosts: "{$.datanodeDns[*]}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - install-hue:
                        action: chefrun
                        phase: install-hue
                        precedingPhases: [ install-ks-indexer ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::hue]" ]
                            jattrs:
                                cloudera:
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                    - start-hue:
                        action: chefrun
                        phase: start-hue
                        precedingPhases: [ install-hue ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "manager" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::restart_hue]" ]
                            jattrs:
                                cloudera:
                                    manager:
                                        host: "{$.managerDns[*][0]}"
                                        version: "{$.cloudera_manager_version}"
                                    hadoop:
                                        version: "{$.cloudera_hadoop_version}"
                                    repository_url: "{$.repository_url}"

                return:
                    - Oozie_Server:
                        description:                "Oozie server node"
                        value:                      "{$.managerIp}"
                    - NameNode:
                        description:                "Name Node for HA if available"
                        value:                      "{$.masterIp}"
                    - Primary_NameNode:
                        description:                "Primary NameNode"
                        value:                      "{$.masterIp}"
                    - Secondary_NameNode:
                        description:                "Secondary NameNode"
                        value:                      "{$.managerIp}"
                    - Hbase_Master:
                        description:                "Hbase node"
                        value:                      "{$.managerIp}"
                    - Hbase_MasterDns:
                        description:                "Hbase Master Dns Name"
                        value:                      "{$.managerDns[*][0]}"
                    - JobTracker:
                        description:                "Job Tracker node"
                        value:                      "{$.managerIp}"
                    - Hive_Server:
                        description:                "Hive server node"
                        value:                      "{$.managerIp}"
                    - Hive_Metastore:
                        description:                "Hive Metastore node"
                        value:                      "{$.managerIp}"
                    - DataNode:
                        description:                "List of data nodes"
                        value:                      "{$.datanodeIps}"
                    - DataDns:
                        description:                "Data node DNS"
                        value:                      "{$.datanodeDns[*]}"
                    - Node_Master:
                        description:                "Master node"
                        value:                      "{$.masterIp}"
                    - Node_Manager:
                        description:                "Manager node"
                        value:                      "{$.managerIp}"
                    - Node_MasterDns:
                        description:                "Master node DNS"
                        value:                      "{$.masterDns[*][0]}"
                    - Node_ManagerDns:
                        description:                "Manager node DNS"
                        value:                      "{$.managerDns[*][0]}"
                    - cloudera_hdfsWebui:
                        description:                "Namenode (HDFS)"
                        value:                      "http://{$.masterIp}:50070"
                    - cloudera_jobtrackerWebui:
                        description:                "Job Tracker (MapReduce)"
                        value:                      "http://{$.managerIp}:50030"
                    - cloudera_hbaseWebui:
                        description:                "Master (HBase)"
                        value:                      "http://{$.managerIp}:60010"
                    - cloudera_Manager:
                        description:                "Cloudera Manager"
                        value:                      "http://{$.managerIp}:7180"
                    - hue_url:
                        description:                "Hue URL"
                        value:                      "http://{$.managerIp}:8888"
                    - cloudera_Login:
                        description:                "Login for Cloudera Manager"
                        value:                      "admin"
                    - cloudera_Password:
                        description:                "Password for Cloudera Manager"
                        value:                      "admin"
                    - cloudera_ApiUrl:
                        description:                "Url to Cloudera Api"
                        value:                      "http://{$.managerIp}:7180/api/v3/clusters/Default/"


            upload-dataset:
                parameters:
                    - datasetpath:
                        description: Amazon S3 or HDFS link to dataset
                        type: string
                        default: s3n://ringcentraldemo/dataset10g

                    - dstpath:
                        description: Relative path in Cluster HDFS to save dataset
                        type: string
                        default: 'hdfs:///tmp/dataset'

                    - awsAccessId:
                        description: Amazon Web Services Access ID
                        type: string

                    - awsSecretKey:
                        description: Amazon Web Services Service Key
                        type: string

                steps:
                    - upload-data:
                        action: chefrun
                        phase: upload-data
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "master" ]
                            recipeUrl: "{$.cookbooks_url}"
                            runList: [ "recipe[cloudera::upload_data]" ]
                            jattrs:
                                dataset:
                                    src_path: "{$.datasetpath}"
                                    dst_path: "{$.dstpath}"
                                aws:
                                    accessId: "{$.awsAccessId}"
                                    secretKey: "{$.awsSecretKey}"

            .provision-node:
                parameters:
                    - roleName:
                        description: Role for the provisioned node
                    - hardwareId:
                        description: Hardware id
                    - quantity:
                        description: Number of nodes to start
                steps:
                    - provision-node:
                        action: provisionAmazonVm
                        phase: provision
                        parameters:
                            roleName: "{$.roleName}"
                            imageId: "{$.cdh_ami}"
                            vmIdentity: root
                            hardwareId: "{$.hardwareId}"
                            quantity: "{$.quantity}"
                            jcloudsNodeNamePrefix: "{$.cluster_prefix}"
                        output:
                            PublicIPs: ips
                    - link-folders:
                        action: execrun
                        precedingPhases: [ provision ]
                        parameters:
                          isSudo: true
                          roles: [ "{$.roleName}" ]
                          command:
                              - bash
                              - "-c"
                              - |
                                    mkdir -p /srv &&
                                    mkdir -p /opt/srv &&
                                    mkdir -p /opt/tmp &&
                                    chmod -R 777 /opt/srv &&
                                    chmod -R 777 /opt/tmp &&
                                    mount --bind /opt/tmp /tmp &&
                                    mount --bind /opt/srv /srv
                    - set-hostname:
                        action: execrun
                        phase: post-provision
                        precedingPhases: [ link-folders ]
                        parameters:
                            isSudo: true
                            roles: [ "{$.roleName}" ]
                            command:
                                - bash
                                - "-c"
                                - |
                                    hostname `curl -s http://169.254.169.254/latest/meta-data/public-hostname` &&
                                    echo "`hostname -i`   `hostname`" >> /etc/hosts &&
                                    hostname
                        output:
                            dns: stdout
                    - install-ntp:
                        action: chefrun
                        phase: post-provision
                        precedingPhases: [ link-folders ]
                        parameters:
                            isSudo: true
                            isSolo: true
                            roles: [ "{$.roleName}" ]
                            runList: ["recipe[ntp]"]
                            recipeUrl: "{$.cookbooks_url}"
                            jattrs:
                              ntp:
                                servers: ["0.amazon.pool.ntp.org"]
                    - add-cdh-repo:
                        action: chefrun
                        precedingPhases: [ post-provision ]
                        parameters:
                          isSudo: true
                          isSolo: true
                          roles: [ "{$.roleName}" ]
                          runList: ["cloudera::cdh_repo"]
                          recipeUrl: "{$.cookbooks_url}"
                          jattrs:
                            cloudera:
                              repository_url: "{$.repository_url}"
                              hadoop:
                                version: "{$.cloudera_hadoop_version}"
                return:
                    ips:
                        value: "{$.PublicIPs}"
                    dns:
                        value: "{$.dns}"
